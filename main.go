package main

import (
	"car-api/internal/routes"
	_ "github.com/arsmn/fiber-swagger/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/recover"
	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "car-api/docs"
)

// @title Car API
// @version 1.0
// @description This is a small CRUD in Fiber
// @termsOfService http://swagger.io/terms/
// @contact.name Jimmy Valdez
// @contact.email jimmyvb16@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
// @BasePath /api
func main() {

	//Fiber config.
	app := fiber.New(fiber.Config{
		ErrorHandler: func(ctx *fiber.Ctx, err error) error {
			// Status code defaults to 500
			code := fiber.StatusInternalServerError
			var msg string
			// Retrieve the custom status code if it's an fiber.*Error
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
				msg = e.Message
			}

			if msg == "" {
				msg = "cannot process the http call"
			}

			// Send custom error page
			err = ctx.Status(code).JSON(internalError{
				Message: msg,
			})
			return nil
		},
	})

	key := "tokenKey"

	app.Use(recover.New())

	// Routes.
	routes.UsersRouters(app, key)
	routes.CarRouters(app, key)
	routes.SwaggerRouters(app) // Register a route for API Docs (Swagger).

	// Start server
	_ = app.Listen(":8080")
}

type internalError struct {
	Message string `json:"message"`
}
