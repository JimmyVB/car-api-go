// Code generated by MockGen. DO NOT EDIT.
// Source: car-api/internal/service (interfaces: CarGateway)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "car-api/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockCarGateway is a mock of CarGateway interface
type MockCarGateway struct {
	ctrl     *gomock.Controller
	recorder *MockCarGatewayMockRecorder
}

// MockCarGatewayMockRecorder is the mock recorder for MockCarGateway
type MockCarGatewayMockRecorder struct {
	mock *MockCarGateway
}

// NewMockCarGateway creates a new mock instance
func NewMockCarGateway(ctrl *gomock.Controller) *MockCarGateway {
	mock := &MockCarGateway{ctrl: ctrl}
	mock.recorder = &MockCarGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCarGateway) EXPECT() *MockCarGatewayMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockCarGateway) GetAll() ([]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockCarGatewayMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCarGateway)(nil).GetAll))
}

// GetOne mocks base method
func (m *MockCarGateway) GetOne(arg0 uuid.UUID) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockCarGatewayMockRecorder) GetOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockCarGateway)(nil).GetOne), arg0)
}

// Save mocks base method
func (m *MockCarGateway) Save(arg0, arg1, arg2 string, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCarGatewayMockRecorder) Save(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCarGateway)(nil).Save), arg0, arg1, arg2, arg3)
}

// Update mocks base method
func (m *MockCarGateway) Update(arg0 uuid.UUID, arg1 model.Car) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockCarGatewayMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCarGateway)(nil).Update), arg0, arg1)
}
